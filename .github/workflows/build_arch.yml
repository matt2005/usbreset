name: build_arch
on: [push, workflow_dispatch]

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    # Note this. We are going to use that in further jobs.
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_date: ${{ steps.date.outputs.date }}
    steps:
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ steps.date.outputs.date }}
          release_name: Release ${{ steps.date.outputs.date }}
          draft: false
          prerelease: false
  build_job:
    # The host should always be linux
    runs-on: ubuntu-18.04
    needs: create_release # we need to know the upload URL
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}

    # Run steps on a matrix of 3 arch/distro combinations
    strategy:
      matrix:
        include:
          - arch: armv6
            distro: buster
          - arch: armv7
            distro: buster
          - arch: aarch64
            distro: buster
          - arch: amd64
            distro: buster
          - arch: i386
            distro: buster

    steps:
      - uses: actions/checkout@v2.3.4
      - uses: matt2005/run-on-arch-action@v2.0.5.1 #uraimo/run-on-arch-action@v2.0.5
        name: Build
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"

          # Pass some environment variables to the container
          env: | # YAML, but pipe character is necessary
            artifact_name: usbreset-${{ matrix.distro }}_${{ matrix.arch }}.deb

          # The shell to run commands with in the container
          shell: /bin/sh

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            case "${{ matrix.distro }}" in
              ubuntu*|jessie|stretch|buster)
                apt-get update -q -y
                apt-get install -q -y git apt-utils autoconf cmake zip build-essential debhelper
                ;;
              fedora*)
                dnf -y update
                dnf -y install git which
                ;;
              alpine*)
                apk update
                apk add git
                ;;
            esac

          # Produce a binary artifact and place it in the mounted volume
          run: |
            ls -hla
            dpkg-buildpackage -b -uc -us
            cp ../usbreset_*.deb "/artifacts/${artifact_name}"
            echo "Produced artifact at /artifacts/${artifact_name}"
      - 
        name: Upload build artifacts 
        id: upload_deploy
        uses: actions/upload-artifact@v2
        with:
          name: deploy
          path: |
            ./artifacts/*
      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          # This is how it will be named on the release page. Put whatever name
          # you like, remember that they need to be different for each platform.
          # You can choose any build matrix parameters. For Rust I use the
          # target triple.
          asset_name: usbreset-${{ needs.create_release.outputs.release_date }}-${{ matrix.distro }}_${{ matrix.arch }}.deb
          # The path to the file you want to upload.
          asset_path: ./artifacts/usbreset-${{ matrix.distro }}_${{ matrix.arch }}.deb
          # probably you will need to change it, but most likely you are
          # uploading a binary file
          asset_content_type: application/octet-stream


